package model.EO;

import java.util.List;

import model.EO.common.AppModule;


import model.VO.DocumentDetailsViewImpl;


import model.VO.FeedbackCalculationVOImpl;
import model.VO.FeedbackViewImpl;
import model.VO.NewCategoryVOImpl;
import model.VO.NewsTableViewImpl;

import model.VO.NewsViewImpl;
import model.VO.ProjectTimelineNewViewImpl;

import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaManager;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;

import java.sql.SQLException;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.DBTransactionImpl;
import oracle.jbo.server.ViewObjectImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Oct 27 08:17:04 GST 2024
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {
    }

    /**
     * Container's getter for DocumentDetailsView1.
     * @return DocumentDetailsView1
     */
    public DocumentDetailsViewImpl getDocumentDetailsView1() {
        return (DocumentDetailsViewImpl) findViewObject("DocumentDetailsView1");
    }
    public void setDocumentDetailsData(List documentLists){
        getDocumentDetailsView1().insertDataIntodocumentDetails(documentLists);
    }
    public void searchbook(String bookname, String bookTitle){
        System.out.println("bookname=="+bookname+"bookTitle=="+bookTitle);
        
        DocumentDetailsViewImpl documentDetailsViewImpl = getDocumentDetailsView1();
        
       documentDetailsViewImpl.applyViewCriteria(documentDetailsViewImpl.getViewCriteria("DocumentDetailsViewCriteria"));
        documentDetailsViewImpl.setNamedWhereClauseParam("bindBookName", bookname);
        documentDetailsViewImpl.setNamedWhereClauseParam("bindBookTitle", bookTitle);
        documentDetailsViewImpl.executeQuery();
//        documentDetailsViewImpl.setBindBookName(bookname);
//        documentDetailsViewImpl.setBindBookTitle(bookTitle);
//        documentDetailsViewImpl.executeQuery();
//        ViewObjectImpl vo =  getDocumentDetailsView1();
//       
//        ViewCriteria vc = vo.getViewCriteria("DocumentDetailsViewCriteria");
//        vo.applyViewCriteria(vc);
//        vo.setNamedWhereClauseParam("bindDocumentName",bookname);
//        vo.setNamedWhereClauseParam("bindDocumentTitle",bookTitle);
//        System.out.println("bofore execute"+vo.getQuery());
//        System.out.println("bofore where"+vo.getWhereClause());
//        vo.executeQuery();
//        System.out.println("after execute"+vo.getQuery());
//        System.out.println("after where"+vo.getWhereClause());
//        System.out.println("search=="+vo.getEstimatedRowCount());
//         String whereClause= null;
//        if(bookname!=null && bookTitle!=null){
//             whereClause="DOCORIGINALNAME =" +"'"+bookname+"'"+" OR DOCTITLE="+"'"+bookTitle+"'";   
//        }
//        if(bookname!=null && bookTitle==null){
//             whereClause="DOCORIGINALNAME =" +"'"+bookname+"'"; 
//        }
//        if(bookname==null && bookTitle!=null){
//             whereClause="DOCTITLE="+"'"+bookTitle+"'";     
//        }
//        ViewObjectImpl searchVO = this.getDocumentDetailsView1(); //relaventVO
//        searchVO.setWhereClause(whereClause);
//        System.out.println("search where cluause bfore="+searchVO.getWhereClause());
//        System.out.println("search query bfore="+searchVO.getQuery());
//        
//        searchVO.executeQuery(); //executeVO with Criteria
//        System.out.println("search where cluause after="+searchVO.getWhereClause());
//        System.out.println("search query after="+searchVO.getQuery());
        
        
//        ViewObject vo1 = getDocumentDetailsView1();
//        ViewCriteriaManager vcm = vo1.getViewCriteriaManager();
//        ViewCriteria vc1 = vcm.getViewCriteria("DocumentDetailsViewCriteria");
//        VariableValueManager vvm = vc.ensureVariableManager();
//        vvm.setVariableValue("bindDocumentName", bookname);
//        vvm.setVariableValue("bindDocumentTitle", bookTitle);
//        vo1.applyViewCriteria(vc);
//        System.out.println("before execute***"+vo.getQuery());
//        vo1.executeQuery();
//        System.out.println("search***"+vo.getEstimatedRowCount());
//        System.out.println("after execute***"+vo.getQuery());
        
    }
    public void resetSearchbook(){
        ViewObjectImpl vo =  getDocumentDetailsView1();
        vo.resetAllViewCriteria();
        vo.removeApplyViewCriteriaName("DocumentDetailsViewCriteria");
        vo.executeQuery(); 
        System.out.println("Reset=="+vo.getEstimatedRowCount());
        
    }


    /**
     * Container's getter for ProjectTimelineView1.
     * @return ProjectTimelineView1
     */
    public ViewObjectImpl getProjectTimelineView1() {
        return (ViewObjectImpl) findViewObject("ProjectTimelineView1");
    }

    /**
     * Container's getter for PieGraphVO1.
     * @return PieGraphVO1
     */
    public ViewObjectImpl getPieGraphVO1() {
        return (ViewObjectImpl) findViewObject("PieGraphVO1");
    }

    /**
     * Container's getter for NewsTableView1.
     * @return NewsTableView1
     */
    public NewsTableViewImpl getNewsTableView1() {
        return (NewsTableViewImpl) findViewObject("NewsTableView1");
    }
    
    public void searchNews(BigDecimal serialId){
        System.out.println("serialId=="+serialId);
        NewsTableViewImpl newsTableViewImpl = getNewsTableView1();
        newsTableViewImpl.applyViewCriteria(newsTableViewImpl.getViewCriteria("NewsTableViewCriteria"));
        newsTableViewImpl.setNamedWhereClauseParam("bindSerialNumber", serialId);
        newsTableViewImpl.executeQuery();
    }

    /**
     * Container's getter for ContactusView1.
     * @return ContactusView1
     */
    public ViewObjectImpl getContactusView1() {
        return (ViewObjectImpl) findViewObject("ContactusView1");
    }

    /**
     * Container's getter for FeedbackView1.
     * @return FeedbackView1
     */
    public FeedbackViewImpl getFeedbackView1() {
        return (FeedbackViewImpl) findViewObject("FeedbackView1");
    }
    public void insertFeedbackValues(Set selectValuesList){
        System.out.println("selectValuesList values in app moduel="+ selectValuesList);
        FeedbackViewImpl feedbackViewImpl = getFeedbackView1();
        feedbackViewImpl.insertFeedbackrows(selectValuesList);
    }

    /**
     * Container's getter for FeedbackCalculationVO1.
     * @return FeedbackCalculationVO1
     */
    public FeedbackCalculationVOImpl getFeedbackCalculationVO1() {
        return (FeedbackCalculationVOImpl) findViewObject("FeedbackCalculationVO1");
    }
    
    public Map getNewsFromDB(){
     ArrayList<String> newsDetails = null;
     Map<Number, ArrayList<String>> newsMap = new HashMap<Number, ArrayList<String>>();
        Map<Number, String> newsCategory = new HashMap<Number, String>();
        NewsTableViewImpl NewsTableViewImpl = getNewsTableView1();
        NewsTableViewImpl.reset();
        NewsTableViewImpl.executeQuery();
        System.out.println("newsTableVO  rowCount=="+NewsTableViewImpl.getEstimatedRowCount());
        RowSetIterator rsi =  NewsTableViewImpl.getRowSetIterator();
        int i=0;
        while (rsi.hasNext()){
            Row r = rsi.next();
            newsDetails = new ArrayList<String>();
            
            
            Number serialNum = (Number) r.getAttribute("Serialnumber");
            
            String headerEng = (String) r.getAttribute("HeadlineEng");
            String tabEng = (String) r.getAttribute("TagEng");
            String summaryEng = (String) r.getAttribute("SummaryEng");
            String headerAr = (String) r.getAttribute("HeadlineAr");
            String tabAr = (String) r.getAttribute("TagAr");
            String summaryAr = (String) r.getAttribute("SummaryAr");
            
            System.out.println("headerEng="+headerEng+tabEng+summaryEng+headerAr+tabAr+summaryAr);
            
            newsDetails.add(headerEng);
            newsDetails.add(tabEng);
            newsDetails.add(summaryEng);
            newsDetails.add(headerAr);
            newsDetails.add(tabAr);
            newsDetails.add(summaryAr);
            
            if(serialNum!=null){
            newsMap.put(serialNum, newsDetails);
            }
        }
        System.out.println("newsMap="+newsMap);
     return newsMap;   
    }
    public Integer getLatestNewsSerialNumber(){
        DBTransactionImpl dbti = (DBTransactionImpl)getDBTransaction();
        CallableStatement statement =
        dbti.createCallableStatement(("BEGIN "+" MaliyaNewsSRNUMPKG.get_NewsSerialNumber(?);" +
                                     "END;"), 0);
        try {
         statement.registerOutParameter(1, java.sql.Types.NUMERIC);
         statement.execute();
         return statement.getInt(1);
        } catch (SQLException sqlerr) {
         throw new JboException(sqlerr);
        } finally {
         try {
             if (statement != null) {
                 statement.close();
             }
         } catch (SQLException closeerr) {
             throw new JboException(closeerr);
         }
        }
    }


    public Integer findMax(ArrayList<Integer> list) 
        { 
      
            if (list == null || list.size() == 0) { 
                return 0; 
            } 
            List<Integer> sortedlist = new ArrayList<>(list); 
            Collections.sort(sortedlist); 
            return sortedlist.get(sortedlist.size() - 1); 
        } 
    /**
     * Container's getter for NewCategoryVO1.
     * @return NewCategoryVO1
     */
    public NewCategoryVOImpl getNewCategoryVO1() {
        return (NewCategoryVOImpl) findViewObject("NewCategoryVO1");
    }
    
    public String deleteNews(Integer serialNumber){
        String flag = null;
            DBTransactionImpl dbti = (DBTransactionImpl)getDBTransaction();
            CallableStatement statement =
              dbti.createCallableStatement(("BEGIN "+"MALIYANEWSPKG.delete_news(?);" +
                                            "END;"), 0);
            try {
                statement.setInt(1, serialNumber);
                statement.execute();
                flag ="success";
               // return statement.getString(4);
            } catch (SQLException sqlerr) {
                flag ="fail";
                throw new JboException(sqlerr);
            } finally {
                try {
                    if (statement != null) {
                        statement.close();
                    }
                } catch (SQLException closeerr) {
                    throw new JboException(closeerr);
                }
            }     
        return flag;
    }
    public String updateNews(ArrayList<String> news){
        System.out.println("inside updateNews ***");
        NewsTableViewImpl vo = getNewsTableView1();
        vo.executeEmptyRowSet();
        String flag = null;
            DBTransactionImpl dbti = (DBTransactionImpl)getDBTransaction();
            CallableStatement statement =
              dbti.createCallableStatement(("BEGIN "+"MALIYANEWSPKG.update_news(?,?,?,?);" +
                                            "END;"), 0);
            try {
                statement.setString(1, news.get(0));
                statement.setString(2, news.get(1));
                statement.setString(3, news.get(2));
                int srnum = Integer.parseInt(news.get(3));
                statement.setInt(4, srnum);
                statement.execute();
                flag ="success";
               // return statement.getString(4);
            } catch (SQLException sqlerr) {
                flag ="fail";
                throw new JboException(sqlerr);
            } finally {
                try {
                    if (statement != null) {
                        statement.close();
                    }
                } catch (SQLException closeerr) {
                    throw new JboException(closeerr);
                }
            }
       
        //vo.resetExecuted();
        return flag;
        
    }
    
    public String addNews(ArrayList<String> news){
        System.out.println("inside updateNews ***");
        NewsTableViewImpl vo = getNewsTableView1();
        vo.executeEmptyRowSet();
        String flag = null;
            DBTransactionImpl dbti = (DBTransactionImpl)getDBTransaction();
            CallableStatement statement =
              dbti.createCallableStatement(("BEGIN "+"MALIYANEWSPKG.update_news(?,?,?,?,?,?);" +
                                            "END;"), 0);
            try {
                statement.setString(1, news.get(0));
                statement.setString(2, news.get(1));
                statement.setString(3, news.get(2));
                statement.setString(4, news.get(3));
                statement.setString(5, news.get(4));
                statement.setString(6, news.get(5));
               // statement.setInt(4, 0);
                statement.execute();
                flag ="success";
               // return statement.getString(4);
            } catch (SQLException sqlerr) {
                flag ="fail";
                throw new JboException(sqlerr);
            } finally {
                try {
                    if (statement != null) {
                        statement.close();
                    }
                } catch (SQLException closeerr) {
                    throw new JboException(closeerr);
                }
            }
       
        //vo.resetExecuted();
        return flag;
        
    }
    public String callGetFeedbackFlag(String userId) {
        System.out.println("inside app module poll");
        CallableStatement st = null;
        String feedbackFlag = null;

        try {
            // Call the updated procedure with OUT parameter
            st = getDBTransaction().createCallableStatement(
                "BEGIN get_feedback_flag(?, ?); END;", 0);

            // Set input parameter
            st.setString(1, userId);

            // Register OUT parameter
            st.registerOutParameter(2, Types.VARCHAR);

            // Execute
            st.execute();

            // Get the OUT parameter
            feedbackFlag = st.getString(2);

        } catch (SQLException e) {
            e.printStackTrace();
            feedbackFlag = "ERROR: " + e.getMessage();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }

        return feedbackFlag;
    }
    
    public String addUserfeedback(String user_id,String user_name,String Glad, String happy,String Neutral, String Dissatisfied,String ExtremelyDissatisfied,String user_comment){
        System.out.println("inside app module feedback");
        CallableStatement st = null;
        String feedbackFlag = null;

        try {
            // Call the updated procedure with OUT parameter
            st = getDBTransaction().createCallableStatement(
                "BEGIN addFeedback(?,?,?,?,?,?,?,?,?); END;", 0);

            // Set input parameter
            st.setString(1, user_id);
            st.setString(2, user_name);
            st.setString(3, Glad);
            st.setString(4, happy);
            st.setString(5, Neutral);
            st.setString(6, Dissatisfied);
            st.setString(7, ExtremelyDissatisfied);
            st.setString(8, user_comment);
            st.setString(9, "Yes");

            // Register OUT parameter

            // Execute
            st.execute();

            // Get the OUT parameter
            feedbackFlag = "success";
        } catch (SQLException e) {
            e.printStackTrace();
            feedbackFlag = "ERROR";
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return feedbackFlag;
    }

    /**
     * Container's getter for UserFeedbackView1.
     * @return UserFeedbackView1
     */
    public ViewObjectImpl getUserFeedbackView1() {
        return (ViewObjectImpl) findViewObject("UserFeedbackView1");
    }

    /**
     * Container's getter for ProjectTimelineNewView1.
     * @return ProjectTimelineNewView1
     */
    public ProjectTimelineNewViewImpl getProjectTimelineNewView1() {
        return (ProjectTimelineNewViewImpl) findViewObject("ProjectTimelineNewView1");
    }
    public Map getTimeLineFromDB(){
     ArrayList<String> timeLineDetails = null;
     Map<Number, ArrayList<String>> newsMap = new HashMap<Number, ArrayList<String>>();
        Map<Number, String> newsCategory = new HashMap<Number, String>();
        ProjectTimelineNewViewImpl timeLineTableVO = getProjectTimelineNewView1();
        timeLineTableVO.reset();
        timeLineTableVO.executeQuery();
        System.out.println("timeLineTableVO  rowCount=="+timeLineTableVO.getEstimatedRowCount());
        RowSetIterator rsi =  timeLineTableVO.getRowSetIterator();
        String arabicPhaseNo = "";
        String arabicPhaseName ="";
        String arabicPhaseDetails ="";
        Date arabicStartDate = null;
        Date arabicEndDate = null;
        String englishPhaseNo ="";
        String englishPhaseName = "";
        String englishPhaseDetails  = "";
        Date  englishStartDate = null;
        Date  englishEndDate = null;
        String arabicCurrentPhase = null;
        String englishCurrentPhase = null;
        
        int i=0;
        while (rsi.hasNext()){
            Row r = rsi.next();
            
            timeLineDetails = new ArrayList<String>();
            Number serialNum = (Number) r.getAttribute("Serialnumber");
           
            if(r.getAttribute("ArabicPhaseno")!=null){
             arabicPhaseNo = (String) r.getAttribute("ArabicPhaseno"); 
             }if(r.getAttribute("ArabicPhaseName")!=null){
                 arabicPhaseName = (String) r.getAttribute("ArabicPhaseName");  
                 }if(r.getAttribute("ArabicPhaseDetails")!=null){
                     arabicPhaseDetails = (String) r.getAttribute("ArabicPhaseDetails"); 
                }if(r.getAttribute("ArabicPhaseStartDate") != "null" && r.getAttribute("ArabicPhaseStartDate")!= null && r.getAttribute("ArabicPhaseStartDate")!=""){
                      arabicStartDate = (Date) r.getAttribute("ArabicPhaseStartDate");  
                }if(r.getAttribute("EnglishPhaseEndDate")!=null && r.getAttribute("EnglishPhaseEndDate")!=""){
                 arabicEndDate = (Date) r.getAttribute("EnglishPhaseEndDate");          
                 }if(r.getAttribute("EnglishPhaseno")!=null){
                     englishPhaseNo = (String) r.getAttribute("EnglishPhaseno");   
                  }if(r.getAttribute("EnglishPhaseName")!=null){
                         englishPhaseName = (String) r.getAttribute("EnglishPhaseName");    
                  }if(r.getAttribute("EnglishPhaseDetails")!=null){
                    englishPhaseDetails = (String) r.getAttribute("EnglishPhaseDetails");         
                }if(r.getAttribute("EnglishPhaseStartDate")!=null && r.getAttribute("EnglishPhaseStartDate")!=""){
                        englishStartDate = (Date) r.getAttribute("EnglishPhaseStartDate");   
                    }if(r.getAttribute("EnglishPhaseEndDate")!=null && r.getAttribute("EnglishPhaseEndDate")!=""){
                            englishEndDate = (Date) r.getAttribute("EnglishPhaseEndDate");   
                    }if(r.getAttribute("ArabicCurrentPhase")!=null && r.getAttribute("ArabicCurrentPhase")!=""){
                            arabicCurrentPhase = (String) r.getAttribute("ArabicCurrentPhase");   
                    }if(r.getAttribute("CurrentPhase")!=null && r.getAttribute("CurrentPhase")!=""){
                            englishCurrentPhase = (String) r.getAttribute("CurrentPhase");   
                    }
            
            System.out.println(arabicStartDate);
            
            timeLineDetails.add(arabicPhaseNo);
            timeLineDetails.add(arabicPhaseName);
            timeLineDetails.add(arabicPhaseDetails);
            timeLineDetails.add(arabicStartDate.toString());
            timeLineDetails.add(arabicEndDate.toString());
            timeLineDetails.add(englishPhaseNo);
            timeLineDetails.add(englishPhaseName);
            timeLineDetails.add(englishPhaseDetails);
            timeLineDetails.add(englishStartDate.toString());
            timeLineDetails.add(englishEndDate.toString());
            timeLineDetails.add(arabicCurrentPhase.toString());
            timeLineDetails.add(englishCurrentPhase.toString());
            newsMap.put(serialNum, timeLineDetails);
        }
     System.out.println("timeLineDetails==="+timeLineDetails);
     return newsMap;   
    }

    /**
     * Container's getter for NewsView1.
     * @return NewsView1
     */
    public NewsViewImpl getNewsView1() {
        return (NewsViewImpl) findViewObject("NewsView1");
    }
}

